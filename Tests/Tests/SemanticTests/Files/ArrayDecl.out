\-TRANSLATIONUNIT
  |-DECL
  | |-DECLSPEC
  | | |-INT
  | \-INITDECLARATORLIST
  |   \-INITDECLARATOR
  |     \-DECLARATOR
  |       \-ARRAY
  |         |-a
  |         \-1
  |-DECL
  | |-DECLSPEC
  | | |-FLOAT
  | \-INITDECLARATORLIST
  |   \-INITDECLARATOR
  |     \-DECLARATOR
  |       \-ARRAY
  |         |-b
  |         \-1
  |-DECL
  | |-DECLSPEC
  | | |-INT
  | \-INITDECLARATORLIST
  |   \-INITDECLARATOR
  |     \-DECLARATOR
  |       |-POINTER
  |       \-ARRAY
  |         |-c
  |         \-2
  |-DECL
  | |-DECLSPEC
  | | |-CONST
  | | \-DECLSPEC
  | |   |-VOLATILE
  | |   \-DECLSPEC
  | |     |-FLOAT
  | \-INITDECLARATORLIST
  |   \-INITDECLARATOR
  |     \-DECLARATOR
  |       \-ARRAY
  |         |-c1
  |         \-5
  \-DECL
    |-DECLSPEC
    | |-INT
    \-INITDECLARATORLIST
      \-INITDECLARATOR
        \-DECLARATOR
          |-POINTER
          | |-TYPEQUALIFIERLIST
          | | \-CONST
          | \-POINTER
          \-ARRAY
            |-b1
            \-3

Structs { }
Symbols {
	FUNC returning VOID
	Arguments{
		STRING :: s
	} :: printf
	FUNC returning VOID
	Arguments{
		STRING :: s
	} :: scanf
	ARRAY of type INT :: a
	ARRAY of type FLOAT :: b
	ARRAY of type POINTER to INT :: c
	const volatile ARRAY of type const volatile FLOAT :: c1
	const ARRAY of type const POINTER to POINTER to INT :: b1
}
