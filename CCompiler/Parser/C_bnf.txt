translation_unit    : external_decl
                    | translation_unit external_decl
                    ;

external_decl	: function_definition
                | decl
                ;

function_definition	    : decl_specs declarator decl_list compound_stat
                        |            declarator decl_list compound_stat
                        | decl_specs declarator	          compound_stat
                        |            declarator           compound_stat
                        ;

decl	: decl_specs init_declarator_list ';'
        | decl_specs ';'
        ;

decl_list	    : decl
                | decl_list decl
                ;

decl_specs	    : storage_class_spec decl_specs
                | storage_class_spec
                | type_spec decl_specs
                | type_spec
                | type_qualifier decl_specs
                | type_qualifier
                ;

storage_class_spec	    : 'auto' | 'register' | 'static' | 'extern' | 'typedef'
                        ;

type_spec	    : 'void' | 'char' | 'short' | 'int' | 'long' | 'float'
                | 'double' | 'signed' | 'unsigned'
                | struct_spec
                | enum_spec
                | typedef_name
                ;

type_qualifier	: 'const' | 'volatile'
                ;

struct_spec	: 'struct' identifier '{' struct_decl_list '}'
            | 'struct'	     '{' struct_decl_list '}'
            | 'struct' identifier
            ;

struct_decl_list	    : struct_decl
                        | struct_decl_list struct_decl
                        ;

init_declarator_list	: init_declarator
                        | init_declarator_list ',' init_declarator
                        ;

init_declarator		    : declarator
                        | declarator '=' initializer
                        ;

struct_decl		        : spec_qualifier_list struct_declarator_list ';'
                        ;

spec_qualifier_list	    : type_spec spec_qualifier_list
                        | type_spec
                        | type_qualifier spec_qualifier_list
                        | type_qualifier
                        ;
                        
struct_declarator_list	    : declarator
                            | struct_declarator_list ',' declarator
                            ;

enum_spec	    : 'enum' identifier '{' enumerator_list '}'
                | 'enum'	    '{' enumerator_list '}'
                | 'enum' identifier
                ;

enumerator_list	    : enumerator
                    | enumerator_list ',' enumerator
                    ;

enumerator	    : identifier
                | identifier '=' const_exp
                ;

declarator	    : pointer direct_declarator
                |	  direct_declarator
                ;

direct_declarator   : identifier
                    | '(' declarator ')'
                    | direct_declarator '[' const_exp ']'
                    | direct_declarator '['		']'
                    | direct_declarator '(' param_list ')'
                    | direct_declarator '(' id_list ')'
                    | direct_declarator '('		')'
                    ;

pointer	    : '*' type_qualifier_list
            | '*'
            | '*' type_qualifier_list pointer
            | '*'	              pointer
            ;

type_qualifier_list	    : type_qualifier
                        | type_qualifier_list type_qualifier
                        ;
                        
param_list	    : param_decl
                | param_list ',' param_decl
                ;

param_decl	    : decl_specs declarator
                ;

id_list		    : identifier
                | id_list ',' identifier
                ;

initializer	    : assignment_exp
                | '{' initializer_list '}'
                | '{' initializer_list ',' '}'
                ;

initializer_list    : initializer
                    | initializer_list ',' initializer
                    ;

typedef_name	: identifier
                ;

stat	: labeled_stat
        | exp_stat
        | compound_stat
        | selection_stat
        | iteration_stat
        | jump_stat
        ;

labeled_stat	: identifier ':' stat
                | 'case' const_exp ':' stat
                | 'default' ':' stat
                ;

exp_stat	    : exp ';'
                |     ';'
                ;

compound_stat	: '{' decl_list stat_list '}'
                | '{'		stat_list '}'
                | '{' decl_list		  '}'
                | '{'			  '}'
                ;

stat_list	    : stat
                | stat_list stat
                ;

selection_stat	    : 'if' '(' exp ')' stat
                    | 'if' '(' exp ')' stat 'else' stat
                    | 'switch' '(' exp ')' stat
                    ;

iteration_stat	    : 'while' '(' exp ')' stat
                    | 'do' stat 'while' '(' exp ')' ';'
                    | 'for' '(' exp ';' exp ';' exp ')' stat
                    | 'for' '(' exp ';' exp ';'	')' stat
                    | 'for' '(' exp ';'	';' exp ')' stat
                    | 'for' '(' exp ';'	';'	')' stat
                    | 'for' '('	';' exp ';' exp ')' stat
                    | 'for' '('	';' exp ';'	')' stat
                    | 'for' '('	';'	';' exp ')' stat
                    | 'for' '('	';'	';'	')' stat
                    ;

jump_stat   : 'continue' ';'
            | 'break' ';'
            | 'return' exp ';'
            | 'return'	';'
            ;

exp	    : assignment_exp
        | exp ',' assignment_exp
        ;

assignment_exp	: conditional_exp
                | unary_exp assignment_operator assignment_exp
                ;

assignment_operator	    : '=' | '*=' | '/=' | '%=' | '+=' | '-=' | '<<='
                        | '>>=' | '&=' | '^=' | '|='
                        ;

conditional_exp	    : logical_or_exp
                    | logical_or_exp '?' exp ':' conditional_exp
                    ;

const_exp	    : conditional_exp
                ;

logical_or_exp	    : logical_and_exp
                    | logical_or_exp '||' logical_and_exp
                    ;

logical_and_exp	    : inclusive_or_exp
                    | logical_and_exp '&&' inclusive_or_exp
                    ;

inclusive_or_exp    : exclusive_or_exp
                    | inclusive_or_exp '|' exclusive_or_exp
                    ;
                    
exclusive_or_exp    : and_exp
                    | exclusive_or_exp '^' and_exp
                    ;

and_exp	    : equality_exp
            | and_exp '&' equality_exp
            ;

equality_exp	: relational_exp
                | equality_exp '==' relational_exp
                | equality_exp '!=' relational_exp
                ;

relational_exp	    : shift_expression
                    | relational_exp '<' shift_expression
                    | relational_exp '>' shift_expression
                    | relational_exp '<=' shift_expression
                    | relational_exp '>=' shift_expression
                    ;

shift_expression    : additive_exp
                    | shift_expression '<<' additive_exp
                    | shift_expression '>>' additive_exp
                    ;

additive_exp	: mult_exp
                | additive_exp '+' mult_exp
                | additive_exp '-' mult_exp
                ;

mult_exp	    : unary_exp
                | mult_exp '*' unary_exp
                | mult_exp '/' unary_exp
                | mult_exp '%' unary_exp
                ;

unary_exp	    : postfix_exp
                | '++' unary_exp
                | '--' unary_exp
                | unary_operator unary_exp
                ;

unary_operator	    : '&' | '*' | '+' | '-' | '~' | '!'
		            ;

postfix_exp	    : primary_exp
                | postfix_exp '[' exp ']'
                | postfix_exp '(' exp ')'
                | postfix_exp '('     ')'
                | postfix_exp '.' identifier
                | postfix_exp '->' identifier
                | postfix_exp '++'
                | postfix_exp '--'
                ;

primary_exp	    : identifier
                | const
                | string
                | '(' exp ')'
                ;

identifier      : id
                ;

const		    : int_const
                | char_const
                | float_const
                ;
